/**
 * Cast sass string to number
 */
@function to-number($value) {
    @if type-of($value) == "number" {
        @return $value;
    } @else if type-of($value) != "string" {
        $_: log("Value for `to-number` should be a number or a string.");
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == "-";
    $numbers: (
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9
    );

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not(index(map-keys($numbers), $character) or $character == ".") {
            @return to-length(
                if($minus, -$result, $result),
                str-slice($value, $i)
            );
        }

        @if $character == "." {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

/// Find the next value in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
///
/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function map-next-value($map, $key) {
    // Store the values of the map as a list, so we can access them with nth
    $values: map-values($map);

    // Ghetto for loop
    $i: 1;
    $found: false;
    @each $val in map-keys($map) {
        @if $found == false {
            @if ($key == $val) {
                $found: true;
            }
            $i: $i + 1;
        }
    }

    // If the key doesn't exist, or it's the last key in the map, return null
    @if $i > length($map) {
        @return null;
    }
    // Otherwise, return the value
    @else {
        @return nth($values, $i);
    }
}


/// Find the next key in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
///
/// @returns {Mixed} The key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function map-next-key($map, $key) {
    $keys: map-keys($map);
    $idx: index($keys, $key);

    @if ($idx == length($keys)) {
        @return null;
    }

    @return nth($keys, $idx + 1);
}


/**
 * Creates a new SASS list by slicing the provided.
 */
@function list-slice($list, $start: 1, $end: length($list)) {
    $result: null;

    @if type-of($start) != number or type-of($end) != number {
        @warn "Either $start or $end are not a number for `slice`.";
    }

    @else if $start > $end {
        @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }

    @else if $start < 1 or $end < 1 {
        @warn "List indexes must be non-zero integers for `slice`.";
    }

    @else if $start > length($list) {
        @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }

    @else if $end > length($list) {
        @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }

    @else {
        $result: ();

        @for $i from $start through $end {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

/// Converts pixel value to a rem value.
///
/// @param {Number|List} $values - Value to convert.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`.
///
/// @returns {List} A list of converted values.
@function rem-calc($value, $base: null) {
    // If no base is defined, defer to the default browser font size
    @if $base == null {
        $base: 16;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: ($base / 100%) * 16px;
    }

    @return to-rem($value, $base);
}


/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
        @warn inspect($value) + ' was passed to to-rem() or rem-calc, which is not a number.';
        @return $value;
    }

    // Calculate rem if units for $value is not rem
    @if unit($value) != 'rem' {
        $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}
